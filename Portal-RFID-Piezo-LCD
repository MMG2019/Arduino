//Incluímos las librerías SPI, MFRC, (para el RFID) LiquidCrystal (LCD), Servo (Motor) y Pitches (Timbre)

#include <SPI.h>
#include <MFRC522.h>
#include <LiquidCrystal.h>
#include <Servo.h>
#include "pitches.h"

//Declaramos una instancia de la clase Servo para controlar el servomotor

Servo myServo;

//Decimos a qué pines está conectado el RFID

MFRC522 mfrc522(53, 6);

// Declaramos un objeto de la clase LiquidCrystal que está conectado a una serie de pines
LiquidCrystal lcd(7, 8, 9, 10, 11, 12);


//Este método despeja el LCD de cualquier mensaje previo e imprime "Bienvenido"

void mensajeInicial(){
  lcd.clear();
  lcd.print("Bienvenido");
  
}

//El método abrirPuerta() llama al método tonoAbrir(), gira el Servo 180 grados y a los 3 segundos (3000 milisegundos) 
//lo gira otros 180 grados en la dirección contraria

void abrirPuerta(){
  
  tonoAbrir(); 
  myServo.write(180);
  delay(3000);
  myServo.write(0);

}

//Este método produce un tono a 660 Hz durante 0.2 segundos
void tonoDenegar(){
  
  //Utilizamos la función tone que lleva como parámetros el pin de conexión y los Herzios
 
  tone(4, 660);
  delay(200);
  
  //Llamamos a noTone para que deje de reproducirse el tono
  
  noTone(4);
}

void tonoAbrir(){

  //Utilizamos la función tone que lleva como parámetros el pin de conexión y los Herzios
  
  tone(4, 660);
  delay(200);
  tone(4, 550);
  delay(200);
  tone(4, 440);
  delay(200);
    
  //Llamamos a noTone para que deje de reproducirse el tono
   noTone(4);
}

void mensaje(bool VoF){
//Pasamos como parámetro un booleano que condiciona el mensaje del LCD

if (VoF==true){
  
  lcd.setCursor(0, 0);            //Colocamos el cursor en la primera posición.
  lcd.print("Acceso concedido"); //Imprimimos el mensaje en caso positivo
  abrirPuerta();                //Llamamos a la función abrir que llamará a su vez a tonoAbrir()
  mensajeInicial();            //Volvemos a imprimir el mensaje de bienvenida
 
  }else{
 
  lcd.setCursor(0, 0);           //Colocamos el cursor en la primera posición.
  lcd.print("Acceso denegado"); //Imprimimos el mensaje en caso negativo.
 
  tonoDenegar();               //Llamamos a la función TonoDegenar que producirá un tono breve de 0.2 segundos.
  delay(2000);                 //Esperamos 2 segundos
  mensajeInicial();            //Volvemos a imprimir el mensaje inicial en el LCD
 
  }
   
}

  void setup() {
 
  myServo.attach(5);    //Llamamos a la función attach del objeto myServo y le pasamos su pin digital como parámetro
  myServo.write(0);     //Colocamos el servo en la posición 0 (un servo tiene una movilidad de 180 grados).
  Serial.begin(9600);   //Iniciamos el monitor serial.
 
 lcd.begin(16, 2);    //Inicializamos el panel LCD declarando la cantidad de caracteres y filas
  SPI.begin();        //Iniciaizamos el SPI
  mfrc522.PCD_Init();
}


void loop()
{

  
//here we have to wait for the card, when it is near to the sensor
if ( ! mfrc522.PICC_IsNewCardPresent()){
return;
}
//we can read it's value
if ( ! mfrc522.PICC_ReadCardSerial()) {
return;
}

Serial.print("Tag:");
String content= "";
for (byte i = 0; i < mfrc522.uid.size; i++) {
Serial.print(mfrc522.uid.uidByte[i]< 0x10 ? " 0" : " ");
Serial.print(mfrc522.uid.uidByte[i], HEX);
content.concat(String(mfrc522.uid.uidByte[i]<0x10 ? " 0" : " "));
content.concat(String(mfrc522.uid.uidByte[i], HEX));
}
content.toUpperCase();
content = content.substring(1);
if(content == "A9 AC C4 98"){
  mensaje(true);
 

}else{
  mensaje(false);
  
}
Serial.println();
}
